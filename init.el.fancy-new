;;; init.el --- Everything has to start somewhere.
;;
;; Copyright (c) 2015 crito
;;
;; Author: crito <crito@cryptodrunks.net>

;;; Commentary:

;; This file simply sets up the default load path and requires
;; the various modules.

;;; License:

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Code:

;;; Some basic functions
(defun add-subfolders-to-load-path (root-dir)
  "Add all sub directories of ROOT-DIR recursively to the load path."
  (dolist (f (directory-files root-dir))
    (let ((dir (expand-file-name f root-dir)))
      (when (and (file-directory-p dir)
                 (not (string-prefix-p "." f)))
        (add-to-list 'load-path dir)
        (add-subfolders-to-load-path dir)))))

(defun packages-installed-p (pkgs)
  "Check if all PKGS are installed."
  (dolist (pkg pkgs)
    (package-installed-p pkg)))

(defun install-packages (pkgs)
  "Install all PKGS."
  (unless (packages-installed-p pkgs)
    (message "Emacs is refreshing it's package database ...")
    (package-refresh-contents)
    
    ;; install the missing packages.
    (dolist (pkg pkgs)
      (unless (package-installed-p pkg)
        (message "==> Bootstrapping %s ..." pkg)
        (package-install pkg)))))

(defmacro hook-up (hook &rest body)
  "Shorten declaration of HOOK byr adding BODY to it."
  (declare (indent 1) (debug t))
  `(add-hook ,hook (lambda () ,@body)))

(defmacro make-transform-symbol-at-point-defun (func)
  "Not sure how FUNC gets transformed in this macro.
Taken from:
https://github.com/waymondo/hemacs/blob/93ee9ebc068ddffbc909c5b378b14cb93a3a73ec/lib/hemacs.el#L29-L39"
  (declare (indent 1) (debug t))
  (let ((defun-name (intern (format "%s-symbol-at-point" (symbol-name func)))))
    `(progn
       (defun ,defun-name ()
         (interactive)
         (save-excursion
           (er/mark-symbol)
           (let ((current-symbol (buffer-substring-no-properties (region-beginning) (region-end))))
             (call-interactively 'delete-region)
             (insert (funcall ',func current-symbol))))))))

;;; Bootstrap
(require 'package)

(defvar bootstrap-packages
  '(use-package
     diminish
     bind-key)
  "Those packages are required from bootstrap on.")

(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)

(package-initialize)
(install-packages bootstrap-packages)

(eval-when-compile
  (require 'use-package)
  (require 'diminish)
  (require 'bind-key))

(setq
 ;; Always load newest byte code.
 load-prefer-newer t)

;; Configure various directory locations.
(defvar dotfiles-dir (file-name-directory load-file-name)
"The root directory of the Emacs configuration.")
(defvar site-lisp-dir (expand-file-name "site-lisp" dotfiles-dir)
"The site-lisp directory of this Emacs distribution.")

;; Add to the load path.
(add-to-list 'load-path site-lisp-dir)
(add-subfolders-to-load-path site-lisp-dir)

;;; Basic libraries
(use-package
  dash
  :ensure t
  :config (dash-enable-font-lock))

(use-package cl-lib
  :ensure t)

(use-package s
  :ensure t
  :commands (s-lower-camel-case s-upper-camel-case s-snake-case s-dashed-words)
  :config
  (make-transform-symbol-at-point-defun s-lower-camel-case)
  (make-transform-symbol-at-point-defun s-upper-camel-case)
  (make-transform-symbol-at-point-defun s-snake-case)
  (make-transform-symbol-at-point-defun s-dashed-words))

;;; UI elements
(use-package "subr"
  :init (defalias 'yes-or-no-p #'y-or-n-p))

(use-package cus-edit
  :defer t
  :init (setq custom-file (locate-user-emacs-file "custom.el"))
  :config (load custom-file 'no-error 'no-message))

(use-package startup
  :defer t
  :init (setq inhibit-startup-screen t
              initial-scratch-message nil
              inhibit-startup-echo-area-message ""))

(use-package scrolling
  :defer t
  :init (setq scroll-margin 0
              scroll-conservatively 100000
              scroll-preserve-screen-position 1))

(use-package tool-bar
  :defer t
  :config (tool-bar-mode -1))

(use-package scroll-bar
  :defer t
  :config (scroll-bar-mode -1))

(use-package menu-bar
  :defer t
  :config (menu-bar-mode -1))

(use-package line-number
  :defer t
  :config (line-number-mode))

(use-package column-number
  :defer t
  :config (column-number-mode))

(use-package size-indication
  :defer t
  :config (size-indication-mode))

(use-package novice
  :defer t
  :init (setq disabled-command-function nil))

(use-package hi-lock
  :ensure t
  :bind (("M-o l" . highlight-lines-matching-regexp)
         ("M-o r" . highlight-regexp)
         ("M-o w" . highlight-phrase)))

(use-package fringe
  :defer t
  :config (fringe-mode 4))

(use-package zenburn-theme
  :ensure t
  :init (load-theme 'zenburn t))

(provide 'init)
;;; init.el ends here
